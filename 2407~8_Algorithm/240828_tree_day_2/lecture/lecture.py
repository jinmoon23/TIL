'''
BST(이진탐색트리)
- 항상 바이너리! 임을 잊지 말자! -> 시간복잡도가 O(log n)라고할 때 밑은 2임.
- 높이 만큼만 비교하면 되기 때문에 시간복잡도가 log N!
- 시간 = 높이(log N ~ N)

삭제연산
- 리프노드의 삭제는 고려할 부분이 없다.
- 자식이 하나인 부모노드(1)의 경우 그 자식을 부모노드(1)의 부모노드(2)에 연결하고 지우면 해결.
- 자식이 둘이라면 삭제할 노드의 왼쪽 서브트리의 가장 큰 값 또는 오른쪽 서브트리의 가장 작은 값을 삭제할 노드로 대체하면 규칙을 위배하지 않는다.

힙
- 완전 이진 트리에 있는 노드 중에서 키값이 가장 큰 노드나 키값이 가장 작은 노드를 찾기 위해서 만든 자료구조
- 부모가 자식보다 큰지 작은지만을 판단하는 자료구조
- 힙의 키를 우선순위로 활용하여 우선순위 키를 구현할 수 있다.
최대힙
- 루트노드 : 키값이 가장 큰 노드
최소힙
- 루트노드 : 키값이 가장 작은 노드
'''