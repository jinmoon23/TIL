// object
// 아래와 같이 타입을 지정하면
// user.id로 접근했을 때 1의 값을 얻지 못한다. 
// 그 이유는 타입스크립트의 object 타입은 단순 값이 객체임을 표현하는 것 외에는
// 아무런 정보도 제공하지 않는 타입이기 때문
let user: object = {
  id: 1,
  name: "이정환",
};
// 이럴 때에는 object가 아닌 
// 객체 리터럴 타입을 이용해야 함.
// 이렇듯 객체 리터럴과 비슷한 문법으로 객체 타입을 정의한 타입을 객체 리터럴 타입이라고 부릅니다.
let user: {
  id: number;
  name: string;
} = {
  id: 1,
  name: "이정환",
};

user.id;

let dog: {
  name: string,
  color: string
} = {
  name: "멍멍이",
  color: "검정색"
}

dog.name
// 타입스크립트는 기존의 정적 타입 시스템을 따르는 언어인 C나 Java와는 달리
// 객체의 타입을 정의할 때 프로퍼티를 기준으로 객체의 구조를 정의하듯이
// 타입을 정의한다.
// 타입스크립트의 이런 특징을 구조적 타입 시스템이라고 부른다.
// 객체의 구조를 결정하는 것은 프로퍼티임.
// 마치 name과 color가 있는 객체는 '강아지 타입'이야 라고 보는 것과 비슷.