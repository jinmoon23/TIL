// array
let numArr: number[] = [1, 2, 3]
let boolArr: Array<boolean> = [true, false, true];
// 위 두가지 방식 모두 배열을 선언하는 방법임.
// 참고로 이렇게 꺽쇠와 함께 타입을 작성하는 문법을 
// 타입스크립트에서는 ‘제네릭’ 이라고 부름.

// 하나의 배열에 여러 가지 타입을 선언할 수도 있음.
// 이런 배열을 ‘유니온 타입’을 사용해 선언한 배열이라고 부름.
let multiArr: (number | string)[] = [1, "hello"];

// 배열 안에 배열을 넣을 수도 있음.
// 이런 배열을 ‘다차원 배열’이라고 부름.
let doubleArr : number[][] = [
  [1, 2, 3], 
  [4, 5],
];

// 튜플은 자바스크립트에는 없는 타입으로,
// 고정된 요소 수 만큼의 타입을 미리 선언했을 때 사용.
let tup1: [number, number] = [1, 2];
let tup2: [number, string, boolean] = [1, "hello", true];


// 튜플은 왜 쓰는가?
const users = [
  ["이정환", 1],
  ["이아무개", 2],
  ["김아무개", 3],
  ["박아무개", 4],
];
// 이런 데이터를 다룰 때 튜플을 사용하면
// 데이터의 구조를 명확하게 표현할 수 있음.
const users: [string, number][] = [
  ["이정환", 1],
  ["이아무개", 2],
  ["김아무개", 3],
  ["박아무개", 4],
  [5, "조아무개"], // 오류 발생
];

// 이런 식으로 데이터를 추가하면
// 자바스크립트에서는 이런 문제를 확인할 방법이 없음. 
// 그러나 타입스크립트에서는 튜플을 사용하면 
// 위와 같은 실수를 빨리 바로잡을 수 있음.