'''
사용신청을 확인해 최대한 많은 화물차가 화물을 싣고 내릴 수 있도록 하면, 최대 몇 대의 화물차가 이용할 수 있는지 알아내 출력하는 프로그램
신청서에는 작업 시작 시간과 완료 시간이 매시 정각을 기준으로 표시
앞 작업의 종료와 동시에 다음 작업을 시작할 수 있다.
첫 줄에 신청서 N이 주어지고, 다음 줄부터 N개의 줄에 걸쳐 화물차의 작업 시작 시간 s와 종료 시간 e가 주어진다.

0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24
        -------------------------
                -----------------------------
                                                            ---
                                          ---------
                                                  ----------
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24
                                ----------------------------
    --------------------------------------------
  -------------------------------------------------------
                           ------------------------------------
                                                     -------
            ------------------------
                                                   ------------
  -------
            ------------------------
                                    ---
0 1 2 3 0 0 0 0 0 0 0 0 0 0 15 16 0 0 0 20 21 22 23 24
'''
import sys
sys.stdin = open('sample_input.txt')

def sol(i,start,end):
    global cnt
    # 1. 종료조건 설정
    if i > N-1:
        return
    # 2. 호출 전 동작 설정
    if end <= n_table[i][0]:
        cnt += 1
        i += 1
        # 3. 재귀호출
        sol(i,n_table[i-1][0],n_table[i-1][1])
    else:
        # 조건을 만족하지 않는경우 넘어가기
        i += 1
        # 3. 재귀호출
        sol(i, start, end)

T = int(input())
for tc in range(1,T+1):
    N = int(input())
    w_table = [list(map(int,input().split())) for _ in range(N)]

    # 종료시간이 빠른 순서대로 오름차순 정렬
    n_table = sorted(w_table, key= lambda x:x[1])
    # print(n_table)
    idx = 1
    s,c = n_table[0]
    cnt = 1
    # 재귀호출
    sol(idx,s,c)

    print(f'#{tc} {cnt}')
